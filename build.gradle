// 빌드 시
buildscript {
    ext {
        springBootVersion = '2.7.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
    }
}
// 하위 모든 프로젝트 공통 세팅
subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'

    configurations {
        asciidoctorExt
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }


    ext {
        set('snippetsDir', file("build/generated-snippets"))
        set('springCloudVersion', "2021.0.3")
    }

    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter'
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}
// 각 프로젝트에서만 사용하는 의존성 추가
project(':eureka') {
    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    }
}
project(':gateway') {
    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    }
}
project(':carsharing') {
    dependencies {
        //eureka Client
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        // Security
        implementation 'org.springframework.boot:spring-boot-starter-security'
        //web
        implementation 'org.springframework.boot:spring-boot-starter-web'
        //jpa
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        //h2db
        runtimeOnly 'com.h2database:h2:1.3.176'
        //modelmapper
        implementation 'org.modelmapper:modelmapper:3.1.0'
        //jwt
        implementation 'io.jsonwebtoken:jjwt:0.9.1'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.restdocs:spring-restdocs-asciidoctor'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    }
    tasks.named('test') {
        outputs.dir snippetsDir
        useJUnitPlatform()
    }

    tasks.named('asciidoctor') {
        inputs.dir snippetsDir
        configurations 'asciidoctorExt'
        dependsOn test
    }

    asciidoctor.doFirst {
        delete file('src/main/resources/static/docs')
    }

    tasks.named('bootJar'){
        dependsOn asciidoctor
        copy {
            from "${asciidoctor.outputDir}"
            into 'BOOT-INF/classes/static/docs'
        }
    }

    task copyDocument(type: Copy){
        dependsOn asciidoctor
        from file("build/docs/asciidoc")
        into file("src/main/resources/static/docs")
    }

    build {
        dependsOn copyDocument
    }
}